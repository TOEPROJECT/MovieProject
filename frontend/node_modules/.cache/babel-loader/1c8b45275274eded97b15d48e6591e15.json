{"ast":null,"code":"var _jsxFileName = \"C:\\\\TOE\\\\movieproject\\\\frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n// import React, { useMemo } from \"react\";\n// import Select from \"react-select\";\n// import \"./App.css\";\n// function App() {\n//   const options = useMemo(\n//     () => [\n//       { value: \"apple\", label: \"Apple\" },\n//       { value: \"banana\", label: \"Banana\" },\n//       { value: \"orange\", label: \"Orange\" },\n//       { value: \"berry\", label: \"Berry\" },\n//     ],\n//     []\n//   );\n//   return (\n//     <div className=\"App\">\n//       <div className=\"category\">Default Select</div>\n//       <Select options={options} />\n//       <div className=\"category\">Loading Select</div>\n//       <Select options={options} isLoading />\n//       <div className=\"category\">Clearable Select</div>\n//       <Select options={options} defaultValue={options[0]} isClearable />\n//       <div className=\"category\">Disabled Select</div>\n//       <Select options={options} defaultValue={options[0]} isDisabled />\n//       <div className=\"category\">Select with multiple values</div>\n//       <Select options={options} defaultValue={options} isMulti />\n//       <div className=\"category\">Select that is initially open</div>\n//       <Select options={options} defaultValue={options[0]} defaultMenuIsOpen />\n//     </div>\n//   );\n// }\n// export default App;\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\nimport \"./App.css\"; // makeAnimated creates animated wrappers around components passed in as arguments.\n// If no arguments are passed, builtin components are wrapped instead.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst animatedComponents = makeAnimated();\n\nfunction App() {\n  _s();\n\n  // predefined options, where \"Banana\" and \"Orange\" are fixed options\n  const options = useMemo(() => [{\n    value: \"apple\",\n    label: \"Apple\"\n  }, {\n    value: \"banana\",\n    label: \"Banana\",\n    isFixed: true\n  }, {\n    value: \"orange\",\n    label: \"Orange\",\n    isFixed: true\n  }, {\n    value: \"berry\",\n    label: \"Berry\"\n  }], []); // styles that do not show 'x' for fixed options\n\n  const styles = useMemo(() => ({\n    multiValueRemove: (base, state) => {\n      return state.data.isFixed ? { ...base,\n        display: \"none\"\n      } : base;\n    }\n  }), []); // sort options with alphabet order\n\n  const orderByLabel = useCallback((a, b) => a.label.localeCompare(b.label), []); // listed fixed options first and then the delete-able options\n\n  const orderOptions = useCallback(values => values.filter(v => v.isFixed).sort(orderByLabel).concat(values.filter(v => !v.isFixed).sort(orderByLabel)), [orderByLabel]); // selected values, initially it lists all options in order\n\n  const [value, setValue] = useState(orderOptions(options)); // handler for changes\n\n  const handleChange = useCallback((inputValue, _ref) => {\n    let {\n      action,\n      removedValue\n    } = _ref;\n\n    switch (action) {\n      case \"remove-value\": // delete with 'x'\n\n      case \"pop-value\":\n        // delete with backspace\n        if (removedValue.isFixed) {\n          setValue(orderOptions([...inputValue, removedValue]));\n          return;\n        }\n\n        break;\n\n      case \"clear\":\n        // clear button is clicked\n        setValue(options.filter(v => v.isFixed));\n        return;\n\n      default:\n    }\n\n    setValue(inputValue);\n  }, [options, orderOptions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Select, {\n      isMulti: true // show multiple options\n      ,\n      components: animatedComponents // animate builtin components\n      ,\n      isClearable: value.some(v => !v.isFixed) // clear button shows conditionally\n      ,\n      styles: styles // styles that do not show 'x' for fixed options\n      ,\n      options: options // all options\n      ,\n      value: value // selected values\n      ,\n      onChange: handleChange // handler for changes\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"iP4Ny4wnnjaYPwf25UJrHm91ZaU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/TOE/movieproject/frontend/src/App.js"],"names":["React","useState","useCallback","useMemo","Select","makeAnimated","animatedComponents","App","options","value","label","isFixed","styles","multiValueRemove","base","state","data","display","orderByLabel","a","b","localeCompare","orderOptions","values","filter","v","sort","concat","setValue","handleChange","inputValue","action","removedValue","some"],"mappings":"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","sourcesContent":["// import React, { useMemo } from \"react\";\r\n// import Select from \"react-select\";\r\n// import \"./App.css\";\r\n\r\n// function App() {\r\n//   const options = useMemo(\r\n//     () => [\r\n//       { value: \"apple\", label: \"Apple\" },\r\n//       { value: \"banana\", label: \"Banana\" },\r\n//       { value: \"orange\", label: \"Orange\" },\r\n//       { value: \"berry\", label: \"Berry\" },\r\n//     ],\r\n//     []\r\n//   );\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <div className=\"category\">Default Select</div>\r\n//       <Select options={options} />\r\n//       <div className=\"category\">Loading Select</div>\r\n//       <Select options={options} isLoading />\r\n//       <div className=\"category\">Clearable Select</div>\r\n//       <Select options={options} defaultValue={options[0]} isClearable />\r\n//       <div className=\"category\">Disabled Select</div>\r\n//       <Select options={options} defaultValue={options[0]} isDisabled />\r\n//       <div className=\"category\">Select with multiple values</div>\r\n//       <Select options={options} defaultValue={options} isMulti />\r\n//       <div className=\"category\">Select that is initially open</div>\r\n//       <Select options={options} defaultValue={options[0]} defaultMenuIsOpen />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\nimport React, { useState, useCallback, useMemo } from \"react\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport \"./App.css\";\r\n\r\n// makeAnimated creates animated wrappers around components passed in as arguments.\r\n// If no arguments are passed, builtin components are wrapped instead.\r\nconst animatedComponents = makeAnimated();\r\n\r\nfunction App() {\r\n  // predefined options, where \"Banana\" and \"Orange\" are fixed options\r\n  const options = useMemo(\r\n    () => [\r\n      { value: \"apple\", label: \"Apple\" },\r\n      { value: \"banana\", label: \"Banana\", isFixed: true },\r\n      { value: \"orange\", label: \"Orange\", isFixed: true },\r\n      { value: \"berry\", label: \"Berry\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // styles that do not show 'x' for fixed options\r\n  const styles = useMemo(\r\n    () => ({\r\n      multiValueRemove: (base, state) => {\r\n        return state.data.isFixed ? { ...base, display: \"none\" } : base;\r\n      },\r\n    }),\r\n    []\r\n  );\r\n\r\n  // sort options with alphabet order\r\n  const orderByLabel = useCallback(\r\n    (a, b) => a.label.localeCompare(b.label),\r\n    []\r\n  );\r\n\r\n  // listed fixed options first and then the delete-able options\r\n  const orderOptions = useCallback(\r\n    (values) =>\r\n      values\r\n        .filter((v) => v.isFixed)\r\n        .sort(orderByLabel)\r\n        .concat(values.filter((v) => !v.isFixed).sort(orderByLabel)),\r\n    [orderByLabel]\r\n  );\r\n\r\n  // selected values, initially it lists all options in order\r\n  const [value, setValue] = useState(orderOptions(options));\r\n\r\n  // handler for changes\r\n  const handleChange = useCallback(\r\n    (inputValue, { action, removedValue }) => {\r\n      switch (action) {\r\n        case \"remove-value\": // delete with 'x'\r\n        case \"pop-value\": // delete with backspace\r\n          if (removedValue.isFixed) {\r\n            setValue(orderOptions([...inputValue, removedValue]));\r\n            return;\r\n          }\r\n          break;\r\n        case \"clear\": // clear button is clicked\r\n          setValue(options.filter((v) => v.isFixed));\r\n          return;\r\n        default:\r\n      }\r\n      setValue(inputValue);\r\n    },\r\n    [options, orderOptions]\r\n  );\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Select\r\n        isMulti // show multiple options\r\n        components={animatedComponents} // animate builtin components\r\n        isClearable={value.some((v) => !v.isFixed)} // clear button shows conditionally\r\n        styles={styles} // styles that do not show 'x' for fixed options\r\n        options={options} // all options\r\n        value={value} // selected values\r\n        onChange={handleChange} // handler for changes\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}