{"ast":null,"code":"var _jsxFileName = \"C:\\\\TOE\\\\movieproject\\\\frontend\\\\src\\\\App.js\";\n// import React, { useMemo } from \"react\";\n// import Select from \"react-select\";\n// import \"./App.css\";\n// function App() {\n//   const options = useMemo(\n//     () => [\n//       { value: \"apple\", label: \"Apple\" },\n//       { value: \"banana\", label: \"Banana\" },\n//       { value: \"orange\", label: \"Orange\" },\n//       { value: \"berry\", label: \"Berry\" },\n//     ],\n//     []\n//   );\n//   return (\n//     <div className=\"App\">\n//       <div className=\"category\">Default Select</div>\n//       <Select options={options} />\n//       <div className=\"category\">Loading Select</div>\n//       <Select options={options} isLoading />\n//       <div className=\"category\">Clearable Select</div>\n//       <Select options={options} defaultValue={options[0]} isClearable />\n//       <div className=\"category\">Disabled Select</div>\n//       <Select options={options} defaultValue={options[0]} isDisabled />\n//       <div className=\"category\">Select with multiple values</div>\n//       <Select options={options} defaultValue={options} isMulti />\n//       <div className=\"category\">Select that is initially open</div>\n//       <Select options={options} defaultValue={options[0]} defaultMenuIsOpen />\n//     </div>\n//   );\n// }\n// export default App;\nimport React from 'react';\nimport chroma from 'chroma-js';\nimport { ColourOption, colourOptions } from '../data';\nimport Select, { StylesConfig } from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colourStyles = {\n  control: styles => ({ ...styles,\n    backgroundColor: 'white'\n  }),\n  option: (styles, _ref) => {\n    let {\n      data,\n      isDisabled,\n      isFocused,\n      isSelected\n    } = _ref;\n    const color = chroma(data.color);\n    return { ...styles,\n      backgroundColor: isDisabled ? undefined : isSelected ? data.color : isFocused ? color.alpha(0.1).css() : undefined,\n      color: isDisabled ? '#ccc' : isSelected ? chroma.contrast(color, 'white') > 2 ? 'white' : 'black' : data.color,\n      cursor: isDisabled ? 'not-allowed' : 'default',\n      ':active': { ...styles[':active'],\n        backgroundColor: !isDisabled ? isSelected ? data.color : color.alpha(0.3).css() : undefined\n      }\n    };\n  },\n  multiValue: (styles, _ref2) => {\n    let {\n      data\n    } = _ref2;\n    const color = chroma(data.color);\n    return { ...styles,\n      backgroundColor: color.alpha(0.1).css()\n    };\n  },\n  multiValueLabel: (styles, _ref3) => {\n    let {\n      data\n    } = _ref3;\n    return { ...styles,\n      color: data.color\n    };\n  },\n  multiValueRemove: (styles, _ref4) => {\n    let {\n      data\n    } = _ref4;\n    return { ...styles,\n      color: data.color,\n      ':hover': {\n        backgroundColor: data.color,\n        color: 'white'\n      }\n    };\n  }\n};\nexport default (() => /*#__PURE__*/_jsxDEV(Select, {\n  closeMenuOnSelect: false,\n  defaultValue: [colourOptions[0], colourOptions[1]],\n  isMulti: true,\n  options: colourOptions,\n  styles: colourStyles\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 96,\n  columnNumber: 3\n}, this));","map":{"version":3,"sources":["C:/TOE/movieproject/frontend/src/App.js"],"names":["React","chroma","ColourOption","colourOptions","Select","StylesConfig","colourStyles","control","styles","backgroundColor","option","data","isDisabled","isFocused","isSelected","color","undefined","alpha","css","contrast","cursor","multiValue","multiValueLabel","multiValueRemove"],"mappings":";AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,SAA5C;AACA,OAAOC,MAAP,IAAiBC,YAAjB,QAAqC,cAArC;;AAEA,MAAMC,YAA8C,GAAG;AACrDC,EAAAA,OAAO,EAAGC,MAAD,KAAa,EAAE,GAAGA,MAAL;AAAaC,IAAAA,eAAe,EAAE;AAA9B,GAAb,CAD4C;AAErDC,EAAAA,MAAM,EAAE,CAACF,MAAD,WAAyD;AAAA,QAAhD;AAAEG,MAAAA,IAAF;AAAQC,MAAAA,UAAR;AAAoBC,MAAAA,SAApB;AAA+BC,MAAAA;AAA/B,KAAgD;AAC/D,UAAMC,KAAK,GAAGd,MAAM,CAACU,IAAI,CAACI,KAAN,CAApB;AACA,WAAO,EACL,GAAGP,MADE;AAELC,MAAAA,eAAe,EAAEG,UAAU,GACvBI,SADuB,GAEvBF,UAAU,GACVH,IAAI,CAACI,KADK,GAEVF,SAAS,GACTE,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,EADS,GAETF,SARC;AASLD,MAAAA,KAAK,EAAEH,UAAU,GACb,MADa,GAEbE,UAAU,GACVb,MAAM,CAACkB,QAAP,CAAgBJ,KAAhB,EAAuB,OAAvB,IAAkC,CAAlC,GACE,OADF,GAEE,OAHQ,GAIVJ,IAAI,CAACI,KAfJ;AAgBLK,MAAAA,MAAM,EAAER,UAAU,GAAG,aAAH,GAAmB,SAhBhC;AAkBL,iBAAW,EACT,GAAGJ,MAAM,CAAC,SAAD,CADA;AAETC,QAAAA,eAAe,EAAE,CAACG,UAAD,GACbE,UAAU,GACRH,IAAI,CAACI,KADG,GAERA,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,EAHW,GAIbF;AANK;AAlBN,KAAP;AA2BD,GA/BoD;AAgCrDK,EAAAA,UAAU,EAAE,CAACb,MAAD,YAAsB;AAAA,QAAb;AAAEG,MAAAA;AAAF,KAAa;AAChC,UAAMI,KAAK,GAAGd,MAAM,CAACU,IAAI,CAACI,KAAN,CAApB;AACA,WAAO,EACL,GAAGP,MADE;AAELC,MAAAA,eAAe,EAAEM,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiBC,GAAjB;AAFZ,KAAP;AAID,GAtCoD;AAuCrDI,EAAAA,eAAe,EAAE,CAACd,MAAD;AAAA,QAAS;AAAEG,MAAAA;AAAF,KAAT;AAAA,WAAuB,EACtC,GAAGH,MADmC;AAEtCO,MAAAA,KAAK,EAAEJ,IAAI,CAACI;AAF0B,KAAvB;AAAA,GAvCoC;AA2CrDQ,EAAAA,gBAAgB,EAAE,CAACf,MAAD;AAAA,QAAS;AAAEG,MAAAA;AAAF,KAAT;AAAA,WAAuB,EACvC,GAAGH,MADoC;AAEvCO,MAAAA,KAAK,EAAEJ,IAAI,CAACI,KAF2B;AAGvC,gBAAU;AACRN,QAAAA,eAAe,EAAEE,IAAI,CAACI,KADd;AAERA,QAAAA,KAAK,EAAE;AAFC;AAH6B,KAAvB;AAAA;AA3CmC,CAAvD;AAqDA,gBAAe,mBACb,QAAC,MAAD;AACE,EAAA,iBAAiB,EAAE,KADrB;AAEE,EAAA,YAAY,EAAE,CAACZ,aAAa,CAAC,CAAD,CAAd,EAAmBA,aAAa,CAAC,CAAD,CAAhC,CAFhB;AAGE,EAAA,OAAO,MAHT;AAIE,EAAA,OAAO,EAAEA,aAJX;AAKE,EAAA,MAAM,EAAEG;AALV;AAAA;AAAA;AAAA;AAAA,QADF","sourcesContent":["// import React, { useMemo } from \"react\";\r\n// import Select from \"react-select\";\r\n// import \"./App.css\";\r\n\r\n// function App() {\r\n//   const options = useMemo(\r\n//     () => [\r\n//       { value: \"apple\", label: \"Apple\" },\r\n//       { value: \"banana\", label: \"Banana\" },\r\n//       { value: \"orange\", label: \"Orange\" },\r\n//       { value: \"berry\", label: \"Berry\" },\r\n//     ],\r\n//     []\r\n//   );\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <div className=\"category\">Default Select</div>\r\n//       <Select options={options} />\r\n//       <div className=\"category\">Loading Select</div>\r\n//       <Select options={options} isLoading />\r\n//       <div className=\"category\">Clearable Select</div>\r\n//       <Select options={options} defaultValue={options[0]} isClearable />\r\n//       <div className=\"category\">Disabled Select</div>\r\n//       <Select options={options} defaultValue={options[0]} isDisabled />\r\n//       <div className=\"category\">Select with multiple values</div>\r\n//       <Select options={options} defaultValue={options} isMulti />\r\n//       <div className=\"category\">Select that is initially open</div>\r\n//       <Select options={options} defaultValue={options[0]} defaultMenuIsOpen />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\nimport React from 'react';\r\nimport chroma from 'chroma-js';\r\n\r\nimport { ColourOption, colourOptions } from '../data';\r\nimport Select, { StylesConfig } from 'react-select';\r\n\r\nconst colourStyles: StylesConfig<ColourOption, true> = {\r\n  control: (styles) => ({ ...styles, backgroundColor: 'white' }),\r\n  option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n    const color = chroma(data.color);\r\n    return {\r\n      ...styles,\r\n      backgroundColor: isDisabled\r\n        ? undefined\r\n        : isSelected\r\n        ? data.color\r\n        : isFocused\r\n        ? color.alpha(0.1).css()\r\n        : undefined,\r\n      color: isDisabled\r\n        ? '#ccc'\r\n        : isSelected\r\n        ? chroma.contrast(color, 'white') > 2\r\n          ? 'white'\r\n          : 'black'\r\n        : data.color,\r\n      cursor: isDisabled ? 'not-allowed' : 'default',\r\n\r\n      ':active': {\r\n        ...styles[':active'],\r\n        backgroundColor: !isDisabled\r\n          ? isSelected\r\n            ? data.color\r\n            : color.alpha(0.3).css()\r\n          : undefined,\r\n      },\r\n    };\r\n  },\r\n  multiValue: (styles, { data }) => {\r\n    const color = chroma(data.color);\r\n    return {\r\n      ...styles,\r\n      backgroundColor: color.alpha(0.1).css(),\r\n    };\r\n  },\r\n  multiValueLabel: (styles, { data }) => ({\r\n    ...styles,\r\n    color: data.color,\r\n  }),\r\n  multiValueRemove: (styles, { data }) => ({\r\n    ...styles,\r\n    color: data.color,\r\n    ':hover': {\r\n      backgroundColor: data.color,\r\n      color: 'white',\r\n    },\r\n  }),\r\n};\r\n\r\nexport default () => (\r\n  <Select\r\n    closeMenuOnSelect={false}\r\n    defaultValue={[colourOptions[0], colourOptions[1]]}\r\n    isMulti\r\n    options={colourOptions}\r\n    styles={colourStyles}\r\n  />\r\n);"]},"metadata":{},"sourceType":"module"}